@{
    var companies = ViewBag.UserAccess.Companies;
}
<style>
    .div-Owner span {
        padding: 15px;
        margin: 10px;
        font-size: large;
        display: block;
        cursor: pointer;
    }

    .div-Role span {
        padding: 10px;
        margin: 10px;
        font-size: medium;
        display: block;
        cursor: pointer;
        text-align: center;
    }

    .area {
        min-height: 50px;
        height: auto;
    }

    .div-Owner-Role {
        min-height: 20px;
        height: auto;
    }

    .div-Owner .close-owner,
    .div-Role .close-owner {
        float: right;
        display: inline-block;
        padding: 2px 5px;
        margin: 0;
        left: -20px;
        position: relative;
        color: gray;
        font-weight: 600;
        display: none;
    }
</style>
<input type="hidden" id="hiddenUserId" value="@ViewBag.UserAccess.SystemUserId" />
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="d-flex">
                    <h4>@ViewBag.UserAccess.FullName <strong>(@ViewBag.UserAccess.UserName)</strong></h4>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12 col-md-4">
        <div class="card">
            <div class="card-body">
                <div class="d-flex">
                    <h4><span class="lstick"></span>Empresas</h4>
                </div>
                <div class="owner-group">
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <div class="d-flex">
                    <h4><span class="lstick"></span>Roles</h4>
                </div>
                <div class="row button-group roles-group">
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-4">
        <div class="card">
            <div class="card-body ">
                <div class="d-flex">
                    <h4><span class="lstick"></span>Permisos</h4>
                </div>
                <div class="area">
                    @foreach (var company in companies)
                    {
                    <div class="div-Owner ui-draggable ui-draggable-handle ui-draggable-disabled" style="position: relative; z-index: 100; left: 0px; top: 0px;">
                        <span class="close-owner" style="display: inline;">x</span>
                        <span id="btnOwner-@company.CompanyId" class="label label-info label-rounded">@company.CompanyName</span>
                        <div class="div-Owner-Role ui-droppable">
                            @foreach (var role in company.Roles)
                                {

                            <div class="col-12 col-md-6 div-Role ui-draggable ui-draggable-handle ui-draggable-disabled" style="z-index: 200; left: 0px; top: 0px; position: relative;">
                                <span class="close-owner" style="display: inline;">x</span>
                                <span id="btnRole-@role.RolId" class="label label-warning label-rounded">@role.RolName</span>
                            </div>

                                }
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-4">
        <div class="card">
            <div class="card-body">
                <div class="d-flex">
                    <h4><span class="lstick"></span>Acciones</h4>
                </div>
                <div class="actions-group">
                    <button type="button" onclick="SaveAccess()" class="btn waves-effect waves-light btn-block btn-secondary">Grabar</button>
                    <button type="button" onclick="CloneAccess()" class="btn waves-effect waves-light btn-block btn-secondary">Clonar</button>
                    <button type="button" onclick="DisableAccess()" class="btn waves-effect waves-light btn-block btn-secondary">Inhabilitar</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script src="~/Scripts/APIController.js"></script>
    <div>
        <script src="~/Scripts/jquery.ui.touch-punch.js"></script>
        <script>$('#widget').draggable();</script>
        <script type="text/javascript">

            var htmlRoles = {};
            var htmlCompanies = {};
            var optionDroppableRole = {
                accept: function (event) {
                    let draggableElement = $(event).children().eq(1).attr('id');
                    let count = $(this).find("#" + draggableElement).length;
                    if (count == 0) return true;
                    return false;
                },
                hoverClass: "ui-state-highlight",
                scope: "role",
                drop: function (event, ui) {
                    let draggableElement = ui.draggable;
                    let droppedOn = $(this);
                    $(draggableElement)
                        .css({
                            top: 0,
                            left: 0,
                            position: "relative"
                        }).appendTo(droppedOn);

                    $(draggableElement).children().show();
                    $(draggableElement).draggable("disable");
                    renderRoles(htmlRoles);
                }
            };

            $(document).ready(function () {
                //init();
                $(".div-Owner-Role").droppable(optionDroppableRole);

                $('.area').on('click', '.close-owner', function (event) {
                    let isOwner = $(this).parent().hasClass("div-Owner");
                    if (!isOwner) {
                        $(this).parent().remove();
                    } else {
                        let roles = $(".div-Owner .div-Role").length;

                        if (roles > 0)
                            return false;
                        else {
                            $(this).parent().remove();
                            renderOwnerCompanies(htmlCompanies);
                        }
                    }
                });

                $(".area").droppable({
                    accept: function (event) {
                        let draggableElement = $(event).children().eq(1).attr('id');

                        let count = $(this).find("#" + draggableElement).length;
                        if (count == 0) return true;

                        return false;
                    },
                    hoverClass: "ui-state-highlight",
                    scope: "area-owner",
                    drop: function (event, ui) {
                        //Add element OWNER
                        let draggableElement = ui.draggable;
                        let droppedOn = $(this);
                        $(draggableElement)
                            .css({
                                top: 0,
                                left: 0,
                                position: "relative"
                            }).appendTo(droppedOn);

                        $(draggableElement).children().show();
                        $(draggableElement).draggable("disable");
                        //Add element ROLE
                        $("<div class='div-Owner-Role'></div>").appendTo(draggableElement).droppable(optionDroppableRole);
                    }
                });

                let roles = APIController.GetRoles().then((res) => {
                    return res.Data;
                });

                let companiesOwner = APIController.GetOwnerCompanies().then((res) => {
                    return res.Data;
                });

                Promise.all([companiesOwner, roles]).then((res) => {
                    renderOwnerCompanies(res[0]);
                    renderRoles(res[1]);

                    htmlCompanies = res[0];
                    htmlRoles = res[1];
                });

            });

            function renderOwnerCompanies(data) {
                for (var i = 0; i < data.length; i++) {
                    let exists = $(".owner-group #btnOwner-" + data[i].OwnerCompanyId).length;
                    if (exists == 0) {
                        let = content = "";
                        content += "<div class='div-Owner'>";
                        content += "<span class='close-owner'>x</span>";
                        content += "<span id='btnOwner-" + data[i].OwnerCompanyId + "' class='label label-info label-rounded'>" + data[i].OwnerCompanyName + "</span>";
                        content += "</div>";
                        $(content).appendTo(".owner-group")
                            .draggable({ revert: "invalid", scope: "area-owner", start: function (event, ui) { $(this).css("z-index", 100); } })
                    }
                }
            }

            function renderRoles(data) {
                $(".roles-group").empty();
                for (var i = 0; i < data.length; i++) {
                    let content = "";
                    content += "<div class='col-12 col-md-6 div-Role'>";
                    content += "<span class='close-owner'>x</span>";
                    content += "<span id='btnRole-" + data[i].RoleId + "' class='label label-warning label-rounded'>" + data[i].RoleName + "</span>";
                    content += "</div>";
                    $(content).appendTo(".roles-group")
                        .draggable({ revert: "invalid", scope: "role", start: function (event, ui) { $(this).css("z-index", 200); } })
                }
            }

            function SaveAccess() {

                let objData = [];
                $(".area .div-Owner").each(function (key, value) {
                    let access = {}
                    access.UserId = $("#hiddenUserId").val();
                    access.OwnerCompanyId = $(value).children().eq(1).attr('id').split("-")[1];
                    access.roles = [];
                    let roles = $(value).find('.div-Role');
                    roles.each(function (key, value) {
                        let roleId = $(value).children().eq(1).attr('id').split("-")[1];
                        access.roles.push(roleId);
                    });
                    objData.push(access);
                });

                ConfirmUpdateAccess(objData);

            }

            function ConfirmUpdateAccess(objData) {
                swal({
                    title: "Actualizar Accesos",
                    text: "¿Seguro de actualizar Accesos?",
                    type: "info",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    showLoaderOnConfirm: true
                }, function () {
                    APIController.SaveAccess(objData).then((res) => {
                        swal.close();
                    });
                });
            }

            //function touchHandler(event) {
            //    var touch = event.changedTouches[0];

            //    var simulatedEvent = document.createEvent("MouseEvent");
            //    simulatedEvent.initMouseEvent({
            //        touchstart: "mousedown",
            //        touchmove: "mousemove",
            //        touchend: "mouseup"
            //    }[event.type], true, true, window, 1,
            //        touch.screenX, touch.screenY,
            //        touch.clientX, touch.clientY, false,
            //        false, false, false, 0, null);

            //    touch.target.dispatchEvent(simulatedEvent);
            //    event.preventDefault();
            //}

            //function init() {
            //    document.addEventListener("touchstart", touchHandler, true);
            //    document.addEventListener("touchmove", touchHandler, true);
            //    document.addEventListener("touchend", touchHandler, true);
            //    document.addEventListener("touchcancel", touchHandler, true);
            //}
        </script>
    </div>
}